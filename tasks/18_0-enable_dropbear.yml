---
- name: Configure System for Dropbear and Busybox to allow Remote Unlock Block
  when:
    - enable_dropbear_support | default(false) | bool
  tags:
    - install_dropbear
  block:

    - name: Install Dracut-Network and Dropbear
      ansible.builtin.apt:
        name: ['dracut-network', 'dropbear-bin']
        state: present
      when:
        - ansible_os_family == "Debian"

    - name: Remove dracut-crypt-ssh directory
      ansible.builtin.file:
        path: "/tmp/dracut-crypt-ssh"
        state: absent

    - name: Create Fresh dracut-crypt-ssh directory
      ansible.builtin.file:
        path: "/tmp/dracut-crypt-ssh"
        state: directory
        mode: "0755"

    - name: Fetch dracut-crypt-ssh repository tarball
      ansible.builtin.get_url:
        url: "https://github.com/dracut-crypt-ssh/dracut-crypt-ssh/tarball/master"
        dest: "/tmp/dracut-crypt-ssh/dracut-crypt-ssh-dracut-crypt-ssh.tar.gz"
        mode: "440"

    - name: Extract dracut-crypt-ssh tarball
      ansible.builtin.unarchive:
        src: "/tmp/dracut-crypt-ssh/dracut-crypt-ssh-dracut-crypt-ssh.tar.gz"
        dest: "/tmp/dracut-crypt-ssh"
        remote_src: yes  # noqa yaml[truthy]
        extra_opts:
          - --strip=1

    # Comment out all lines containing: inst "$moddir"/helper/
    - name: Modify dracut module module-setup.sh
      ansible.builtin.replace:
        path: "/tmp/dracut-crypt-ssh/modules/60crypt-ssh/module-setup.sh"
        regexp: '(^.*inst "\$moddir"\/helper\/.*$)'
        replace: '#\1'

    - name: Create dracut module 60crypt-ssh directory
      ansible.builtin.file:
        path: "/usr/lib/dracut/modules.d/60crypt-ssh"
        mode: "0755"
        state: directory

    - name: Copy dracut module 60crypt-ssh directory files
      ansible.builtin.copy:
        src: /tmp/dracut-crypt-ssh/modules/60crypt-ssh/
        dest: /usr/lib/dracut/modules.d/60crypt-ssh/
        remote_src: true
        mode: "0755"

    # [ Setup Host Keys ]######################################################
    - name: Create /etc/dropbear/ directory for host keys
      ansible.builtin.file:
        path: "/etc/dropbear/"
        mode: "0755"
        state: directory

    - name: Create host keys in PEM format
      ansible.builtin.command:
        cmd: 'ssh-keygen -t {{ item }} -m PEM -f /etc/dropbear/ssh_host_{{ item }}_key -N ""'
        creates: "/etc/dropbear/ssh_host_{{ item }}_key"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        # The dropbear.conf will look for these 3 keys
        - "rsa"
        - "ecdsa"
        - "ed25519"

    # [ Setup Dracut Networking for Dropbear]##################################

    # With rd.neednet=1 it will fail to boot if no network available
    # This can be a problem with laptops and docking stations, if the dock
    # is not connected (no ethernet) it can fail to boot
    - name: Create file /etc/cmdline.d/dracut-network.conf for DHCP
      ansible.builtin.lineinfile:
        path: "/etc/cmdline.d/dracut-network.conf"
        regexp: '(^.*ip=.*$)'
        line: 'ip={{ apply_dropbear_settings.remoteaccess_ip_config }} rd.neednet=1'
        create: true
        mode: "0644"
        state: present
        backup: true
      when:
        - not apply_dropbear_settings.remoteaccess_ip_config == "static"

    # With rd.neednet=1 it will fail to boot if no network available
    # This can be a problem with laptops and docking stations, if the dock
    # is not connected (no ethernet) it can fail to boot
    - name: Create file /etc/cmdline.d/dracut-network.conf for Static IP
      ansible.builtin.lineinfile:
        path: "/etc/cmdline.d/dracut-network.conf"
        regexp: '(^.*ip=.*$)'
        line: 'ip={{ apply_dropbear_settings.remoteaccess_ip }}:::{{
          apply_dropbear_settings.remoteaccess_netmask }}:::none rd.neednet=1 rd.break'
        create: true
        mode: "0644"
        state: present
        backup: true
      when:
        - apply_dropbear_settings.remoteaccess_ip_config == "static"

    - name: Create /etc/zfsbootmenu/dracut.conf.d directory
      ansible.builtin.file:
        path: "/etc/zfsbootmenu/dracut.conf.d"
        state: directory
        mode: "0755"

    # [ Setup Dracut Networking when NOT using Dropbear]#######################
    - name: Configure Dracut Network without Dropbear
      ansible.builtin.lineinfile:
        path: "/etc/zfsbootmenu/dracut.conf.d/network.conf"
        line: 'install_items+=" /etc/cmdline.d/dracut-network.conf "'
        create: true
        mode: "0644"
        state: present
        backup: true
      when:
        - not enable_dropbear_support | default(false) | bool

    # With rd.neednet=1 it will fail to boot if no network available
    # This can be a problem with laptops and docking stations, if the dock
    # is not connected (no ethernet) it can fail to boot. Setting to 1 really
    # only needed with for Dropbear support
    - name: Create file /etc/cmdline.d/dracut-network.conf for DHCP
      ansible.builtin.lineinfile:
        path: "/etc/cmdline.d/dracut-network.conf"
        regexp: '(^.*ip=.*$)'
        line: 'ip={{ apply_dropbear_settings.remoteaccess_ip_config }} rd.neednet=0'
        create: true
        mode: "0644"
        state: present
        backup: true
      when:
        - not apply_dropbear_settings.remoteaccess_ip_config == "static"
        - not enable_dropbear_support | default(false) | bool

    # With rd.neednet=1 it will fail to boot if no network available
    # This can be a problem with laptops and docking stations, if the dock
    # is not connected (no ethernet) it can fail to boot. Setting to 1 really
    # only needed with for Dropbear support
    - name: Create file /etc/cmdline.d/dracut-network.conf for Static IP
      ansible.builtin.lineinfile:
        path: "/etc/cmdline.d/dracut-network.conf"
        regexp: '(^.*ip=.*$)'
        line: 'ip={{ apply_dropbear_settings.remoteaccess_ip }}:::{{
          apply_dropbear_settings.remoteaccess_netmask }}:::none rd.neednet=0 rd.break'
        create: true
        mode: "0644"
        state: present
        backup: true
      when:
        - apply_dropbear_settings.remoteaccess_ip_config == "static"
        - not enable_dropbear_support | default(false) | bool

    # [ Add Banner to Dropbear connection ]####################################

    - name: Copy dracut network banner to /etc/zfsbootmenu/dracut.conf.d/banner.txt
      ansible.builtin.template:
        src: dracut_banner.txt.j2
        dest: "/etc/zfsbootmenu/dracut.conf.d/banner.txt"
        owner: "root"
        group: "root"
        mode: "0644"

    - name: Add network banner to dropbear startup parameters
      ansible.builtin.replace:
        path: "/usr/lib/dracut/modules.d/60crypt-ssh/dropbear-start.sh"
        regexp: '(^.* /sbin/dropbear .*$)'
        replace: '\1 -b /etc/banner.txt'

    - name: Add network banner to dracut module setup
      ansible.builtin.replace:
        path: "/usr/lib/dracut/modules.d/60crypt-ssh/module-setup.sh"
        regexp: '(^}$)'
        replace: |
            #
            # Copy dropbear welcome banner message
              inst /etc/zfsbootmenu/dracut.conf.d/banner.txt /etc/banner.txt
            \1

    # [ Add dracut dropbear config file ]######################################
    - name: Copy dracut dropbear config file to /etc/zfsbootmenu/dracut.conf.d/dropbear.conf
      ansible.builtin.template:
        src: dracut_dropbear.conf.j2
        dest: "/etc/zfsbootmenu/dracut.conf.d/dropbear.conf"
        owner: "root"
        group: "root"
        mode: "0644"

    - name: Run Dracut Generate
      ansible.builtin.command:
        cmd: "dracut -f --regenerate-all"
      register: cmd_output
      changed_when: cmd_output.rc == 0

    - name: Update Syslinux when not using EFI
      ansible.builtin.command:
        cmd: "/boot/efi/syslinux-update.sh"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      when:
        - efi_firmware_directory.stat.isdir is undefined
