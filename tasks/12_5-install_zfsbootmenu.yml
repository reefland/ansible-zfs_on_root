---
# [ Install ZFS Boot Menu ]##############################################
- name: Install ZFS Boot Menu Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - install_zfsbootmenu
  block:
    - name: Run chroot command to install ZFS Boot Menu
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "DEBIAN_FRONTEND=noninteractive apt-get --yes install kexec-tools"
        - "apt-get --yes install libconfig-inifiles-perl libsort-versions-perl
          libboolean-perl fzf mbuffer make curl bsdextrautils"
      when:
        - ansible_os_family == "Debian"

    # Assign command-line arguments to be used when booting the final kernel
    - name: Run chroot command to assign arguments when booting kernel
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - 'zfs set org.zfsbootmenu:commandline="rw quiet {{ zswap_config }}" {{ root_pool_name }}/ROOT'
        - 'zfs set org.zfsbootmenu:commandline="rw quiet {{ zswap_config }}" {{ root_pool_dataset_path }}'
        - 'zfs set canmount=noauto {{ root_pool_name }}/ROOT'
        - 'zfs set canmount=noauto {{ root_pool_dataset_path }}'

    ###########################################################################
    # [ Install ZFSBootMenu Package Directly ]

    - name: Fetch ZFSBootMenu KERNEL bundle
      ansible.builtin.get_url:
        url: "{{ zfs_boot_menu_repo_url }}/releases/download/{{ zfs_boot_menu_version }}/zfsbootmenu-recovery-x86_64-{{ zfs_boot_menu_version }}.tar.gz"
        dest: "{{ live_cd_mountpoint }}/tmp/zfsbootmenu.tar.gz"
        mode: "440"

    - name: Extract ZFSBootMenu KERNEL files
      ansible.builtin.unarchive:
        src: "{{ live_cd_mountpoint }}/tmp/zfsbootmenu.tar.gz"
        dest: "{{ live_cd_mountpoint }}/{{ zfs_boot_menu_path }}"
        remote_src: yes # noqa yaml[truthy]
        extra_opts:
          - --strip-components=1
          - --no-same-owner

    - name: Fetch syslinux-update.sh script from the repo
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/{{ zfs_boot_menu_repo }}/master/contrib/syslinux-update.sh"
        dest: "{{ live_cd_mountpoint }}/{{ efi_boot_mountpoint }}/syslinux-update.sh"
        mode: "755"

    - name: Modify syslinux-update.sh
      ansible.builtin.replace:
        path: "{{ live_cd_mountpoint }}{{ efi_boot_mountpoint }}/syslinux-update.sh"
        regexp: '{{ find_values.regexp }}'
        replace: '{{ find_values.replace }}'
      loop:
        - { regexp: '^SYSLINUX_ROOT.*',
            replace: 'SYSLINUX_ROOT="{{ efi_boot_mountpoint }}"' }
        - { regexp: '^KERNEL_PATH.*',
            replace: 'KERNEL_PATH="EFI/zfsbootmenu"' }
        - { regexp: '^SYSLINUX_CONFD.*',
            replace: 'SYSLINUX_CONFD="{{ efi_boot_mountpoint }}/snippets"' }
        - { regexp: '^cp .*',
            replace: 'cp "${SYSLINUX_CFG}" "${SYSLINUX_ROOT}/syslinux/syslinux.cfg"' }
      loop_control:
        loop_var: find_values

    - name: Create Syslinux snippets directory set permissions
      ansible.builtin.file:
        state: directory
        path: "{{ mount_path.path }}"
        mode: "{{ mount_path.mode }}"
      loop:
        - { path: "{{ live_cd_mountpoint }}{{ efi_boot_mountpoint }}/snippets/", mode: "755" }
      loop_control:
        loop_var: mount_path
        label: "{{ mount_path.path }}"

    # Header for syslinux.cfg
    - name: Copy Snippets Files for syslinux.cfg to /boot/efi/snippets/
      ansible.builtin.template:
        src: "snippets_{{ item.template_name }}.j2"
        dest: "{{ live_cd_mountpoint }}{{ efi_boot_mountpoint }}/snippets/{{ item.template_name }}"
        owner: "root"
        group: "root"
        mode: "0644"
      loop:
        - { template_name: "01_header" }
        - { template_name: "05_memtest86" }
        - { template_name: "06_hardware" }
      loop_control:
        loop_var: item
        label: "{{ item.template_name }}"

    # Download and install memtest86
    - name: Run chroot command to download and install memtest86
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "rm -rf /tmp/memtest86 && mkdir -p /tmp/memtest86/mnt"
        - "mkdir -p {{ efi_boot_path }}/tools/memtest86"
        - "curl -L https://www.memtest86.com/downloads/memtest86-usb.zip
          -o /tmp/memtest86/memtest86-usb.zip"
        - "curl -L https://www.memtest86.com/downloads/memtest86-{{ memtest86_syslinux_version }}-iso.zip
          -o /tmp/memtest86/memtest86-iso.zip"
        # For EFI
        - "unzip -d /tmp/memtest86 /tmp/memtest86/memtest86-usb.zip memtest86-usb.img"
        - "losetup -P /dev/loop33 /tmp/memtest86/memtest86-usb.img"
        - "mount -o loop /dev/loop33p1 /tmp/memtest86/mnt"
        - "cp /tmp/memtest86/mnt/EFI/BOOT/BOOTX64.efi {{ efi_boot_path
          }}/tools/memtest86/memtest86.efi"
        - "umount /tmp/memtest86/mnt"
        - "losetup -d /dev/loop33"
        # For Syslinux
        - "unzip -d /tmp/memtest86 /tmp/memtest86/memtest86-iso.zip Memtest86-{{ memtest86_syslinux_version }}.iso"
        - "mount -o loop /tmp/memtest86/Memtest86-{{ memtest86_syslinux_version }}.iso /tmp/memtest86/mnt"
        - "cp /tmp/memtest86/mnt/isolinux/memtest {{ efi_boot_path
          }}/tools/memtest86/memtest86.syslinux"
        - "umount /tmp/memtest86/mnt"
