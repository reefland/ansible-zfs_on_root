---
# [ Install ZFS Boot Menu ]##############################################
- name: Install ZFS Boot Menu Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - install_zfsbootmenu
  block:
    - name: Run chroot command to install ZFS Boot Menu
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "DEBIAN_FRONTEND=noninteractive apt-get --yes install kexec-tools"
        - "apt-get --yes install libconfig-inifiles-perl libsort-versions-perl
          libboolean-perl libyaml-pp-perl fzf mbuffer make curl"
      when:
        - ansible_os_family == "Debian"

    # Assign command-line arguments to be used when booting the final kernel
    - name: Run chroot command to assign arguments when booting kernel
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - 'zfs set org.zfsbootmenu:commandline="rw" {{ root_pool_name }}/ROOT'
        - 'zfs set org.zfsbootmenu:commandline="rw" {{ root_pool_dataset_path }}'
        - 'zfs set canmount=noauto {{ root_pool_name }}/ROOT'
        - 'zfs set canmount=noauto {{ root_pool_dataset_path }}'

    ###########################################################################
    # [ Install ZFS Boot Menu git repo and build locally ]#####################
    - name: Run chroot command to Install ZFS Boot Menu git repo and build
      ansible.builtin.shell: # noqa command-instead-of-shell
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "rm -rf /tmp/zfsbootmenu && mkdir -p /tmp/zfsbootmenu"
        - "cd /tmp/zfsbootmenu && curl -L https://get.zfsbootmenu.org/source |
          tar xz --strip=1 && make install"
        # This seems to fail sometimes - gets killed during install
        # (use libyaml-pp-perl package instead)
        # - "cd /tmp/zfsbootmenu && PERL_MM_USE_DEFAULT=1 cpan 'YAML::PP'"
        # Create pre and post hooks dirs and syslinux snippets dir
        - "mkdir -p /etc/zfsbootmenu/generate-zbm.pre.d"
        - "mkdir -p /etc/zfsbootmenu/generate-zbm.post.d"
        - "mkdir -p {{ efi_boot_mountpoint }}/snippets"
        # Copy syslinux-update.sh script
        - "cp /tmp/zfsbootmenu/contrib/syslinux-update.sh /etc/zfsbootmenu/generate-zbm.post.d"
        - "chmod +x /etc/zfsbootmenu/generate-zbm.post.d/syslinux-update.sh"

    # Modify syslinux-update.sh script to let generate-zbm create a valid
    # syslinux.cfg that can also include memtest86 snippet
    - name: Modify syslinux-update.sh
      ansible.builtin.replace:
        path: "{{ live_cd_mountpoint }}/etc/zfsbootmenu/generate-zbm.post.d/syslinux-update.sh"
        regexp: '{{ find_values.regexp }}'
        replace: '{{ find_values.replace }}'
      loop:
        - { regexp: '^SYSLINUX_ROOT.*',
            replace: 'SYSLINUX_ROOT="{{ efi_boot_mountpoint }}"' }
        - { regexp: '^KERNEL_PATH.*',
            replace: 'KERNEL_PATH="EFI/zfsbootmenu"' }
        - { regexp: '^SYSLINUX_CONFD.*',
            replace: 'SYSLINUX_CONFD="{{ efi_boot_mountpoint }}/snippets"' }
        - { regexp: '^cp .*',
            replace: 'cp "${SYSLINUX_CFG}" "${SYSLINUX_ROOT}/syslinux/syslinux.cfg"' }
      loop_control:
        loop_var: find_values

    # Configure ZFSBootMenu
    - name: Copy ZFSBootMenu Config template to /mnt/etc/zfsbootmenu/config.yaml
      ansible.builtin.template:
        src: zfsbootmenu_config.yaml.j2
        dest: "{{ live_cd_mountpoint }}/etc/zfsbootmenu/config.yaml"
        owner: "root"
        group: "root"
        mode: "0644"

    # Header for syslinux.cfg
    - name: Copy Header for syslinux.cfg template to /boot/efi/snippets/01_header
      ansible.builtin.template:
        src: snippets_01_header.j2
        dest: "{{ live_cd_mountpoint }}{{ efi_boot_mountpoint }}/snippets/01_header"
        owner: "root"
        group: "root"
        mode: "0644"

    # Download and install memtest86
    # EFI version is latest v10, syslinux version is v4
    - name: Run chroot command to download and install memtest86
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "rm -rf /tmp/memtest86 && mkdir -p /tmp/memtest86/mnt"
        - "mkdir -p {{ efi_boot_path }}/tools/memtest86"
        - "curl -L https://www.memtest86.com/downloads/memtest86-usb.zip
          -o /tmp/memtest86/memtest86-usb.zip"
        - "curl -L https://www.memtest86.com/downloads/memtest86-4.3.7-iso.zip
          -o /tmp/memtest86/memtest86-iso.zip"
        # For EFI
        - "unzip -d /tmp/memtest86 /tmp/memtest86/memtest86-usb.zip memtest86-usb.img"
        - "losetup -P /dev/loop33 /tmp/memtest86/memtest86-usb.img"
        - "mount -o loop /dev/loop33p1 /tmp/memtest86/mnt"
        - "cp /tmp/memtest86/mnt/EFI/BOOT/BOOTX64.efi {{ efi_boot_path
          }}/tools/memtest86/memtest86.efi"
        - "umount /tmp/memtest86/mnt"
        - "losetup -d /dev/loop33"
        # For Syslinux
        - "unzip -d /tmp/memtest86 /tmp/memtest86/memtest86-iso.zip Memtest86-4.3.7.iso"
        - "mount -o loop /tmp/memtest86/Memtest86-4.3.7.iso /tmp/memtest86/mnt"
        - "cp /tmp/memtest86/mnt/isolinux/memtest {{ efi_boot_path
          }}/tools/memtest86/memtest86.syslinux"
        - "umount /tmp/memtest86/mnt"

    # Syslinux entry for memtest86+
    - name: Copy Header for syslinux.cfg template to /boot/efi/snippets/05_memtest86
      ansible.builtin.template:
        src: snippets_05_memtest86.j2
        dest: "{{ live_cd_mountpoint }}{{ efi_boot_mountpoint }}/snippets/05_memtest86"
        owner: "root"
        group: "root"
        mode: "0644"
