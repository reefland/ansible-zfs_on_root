---
# ###[ Wipe Partitions of Selected Device ]######################################

- name: Wipe Partitions of Selected Devices Block
  when:
    ansible_nodename != "localhost"
  tags:
    - clear_partition_tables_from_devices
  block:
    - name: Insure Swap Partitions are Not Used
      ansible.builtin.command:
        cmd: "swapoff --all"
      register: cmd_output
      changed_when: cmd_output.rc == 0

    - name: Unmount any mdadm disks that might have been automounted and Stop all found mdadm arrays
      ansible.builtin.shell: |
        find /dev -iname md* -type b -exec bash -c \
        "umount {} > /dev/null 2>&1 ;
        mdadm --stop --force {} > /dev/null 2>&1 ;
        mdadm --remove {} > /dev/null 2>&1" \;
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true

    - name: Remove ZFS labels from previous usage
      ansible.builtin.command:
        cmd: "zpool labelclear -f {{ item }}-part{{ root_partition }}"
        removes: "{{ item }}-part{{ root_partition }}"
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true
      loop:
        "{{ disk_by_id }}"

    - name: Wipe mdadm superblock from partitions
      ansible.builtin.command:
        cmd: "mdadm --zero-superblock --force {{ item }}-part{{ boot_partition }}"
        removes: "{{ item }}-part{{ boot_partition }}"
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true
      loop:
        "{{ disk_by_id }}"

    - name: Wipe filesystem information
      ansible.builtin.command:
        cmd: "wipefs --all --force {{ item }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      loop:
        "{{ disk_by_id }}"

    - name: Zap all partition table information
      ansible.builtin.command:
        cmd: "sgdisk --zap-all {{ item }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      loop:
        "{{ disk_by_id }}"

    - name: Clear out all partition data; GPT header; protective MBR, etc
      ansible.builtin.command:
        cmd: "sgdisk --clear {{ item }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      loop:
        "{{ disk_by_id }}"

    - name: Wait for kernel notification of changes to be processed
      ansible.builtin.command:
        cmd: "udevadm settle"
      register: cmd_output
      changed_when: cmd_output.rc == 0

    - name: Pause for 5 seconds to settle
      ansible.builtin.pause:
        seconds: 5
