---
# [ Single Disk Unencrypted Swap Configuration ]###############################
- name: Single Disk Unencrypted Swap Block
  when:
    - ansible_nodename != "localhost"
    - enable_swap_partitions|default(true)|bool
    - not root_pool_encryption|default(false)|bool
    - disk_by_id | length == 1
  tags:
    - config_swap
  block:
    - name: Run chroot commands to Create Swap Filesystem for Single Disk Unencrypted
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "mkswap -f {{ disk_by_id[0] }}-part2"
        - "echo UUID=$(blkid -s UUID -o value {{ disk_by_id[0] }}-part2)
          none swap discard,sw 0 0 >> /etc/fstab"

    - name: Run chroot command to enable Unencrypted swap
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c 'swapon -a'"
      register: cmd_output
      changed_when: cmd_output.rc == 0

###############################################################################
# [ Create Multi Disk Swap Mirror or RAID ]####################################
- name: Create Multi Disk Swap Mirror or RAID Block
  when:
    - ansible_nodename != "localhost"
    - enable_swap_partitions | default(true) | bool
    - disk_by_id | length | int > 1
  tags:
    - config_swap
  block:
    - name: Run chroot command to install mdadm for multi-disk swap
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c 'apt install --yes mdadm'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      when:
        - ansible_os_family == "Debian"

    - name: Create name of swap device
      ansible.builtin.set_fact:
        swap_dev_name: "/dev/md/swap"

    # if 2 devices use a mirror
    - name: See if mirror is to be used
      ansible.builtin.set_fact:
        mdadm_type: "mirror"
      when:
        - disk_by_id | length | int == 2

    # If more than 2 devices make a RAID device
    - name: See if raid should be used
      ansible.builtin.set_fact:
        mdadm_type: "raid5"
      when:
        - disk_by_id | length | int > 2

    # Create a list of swap device partitions to use
    - name: Create a list of swap device partitions to use
      ansible.builtin.set_fact:
        mdadm_swap_device_list: "{{ mdadm_swap_device_list | default('') }} {{ item }}-part2"
      loop:
        "{{ disk_by_id }}"

    - name: Unmount any mdadm disks that might have been automounted and Stop all found mdadm arrays
      ansible.builtin.shell: >
        find /dev -iname md* -type b -exec bash -c
        "umount {} > /dev/null 2>&1 ;
        mdadm --stop --force {} > /dev/null 2>&1 ;
        mdadm --remove {} > /dev/null 2>&1" \;
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true

    - name: Wipe mdadm superblock from swap partitions
      ansible.builtin.command:
        cmd: mdadm --zero-superblock --force {{ item }}-part2
      register: cmd_output
      changed_when:
        cmd_output.rc == 0
      ignore_errors: true
      loop:
        "{{ disk_by_id }}"

    # The "-R" - is needed to suppress the "Continue creating array?" prompt
    - name: Run chroot command to create mdadm device for multi-disk swap
      ansible.builtin.command:
        cmd: >
          mdadm --create {{ swap_dev_name }} --verbose -R --metadata=1.2
          --force --level={{ mdadm_type }} --raid-devices={{ disk_by_id | length | int }}
          --homehost={{ inventory_hostname_short }} --name=swap --assume-clean {{ mdadm_swap_device_list }}
        creates: "{{ swap_dev_name }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0

    - name: Run chroot command to create mdadm.conf file multi-disk swap partition
      ansible.builtin.command:
        cmd:
          "{{ chroot_cmd }} bash -c 'mdadm --examine --scan >> {{ live_cd_mountpoint }}/etc/mdadm/mdadm.conf'"
        creates: "{{ swap_dev_name }}"
      register: cmd_output
      changed_when: cmd_output.rc == 0

###############################################################################
# [ Configure Multi Disk Unencrypted Swap ]####################################
- name: Multi Disk Unencrypted Swap Block
  when:
    - ansible_nodename != "localhost"
    - enable_swap_partitions | default(true) | bool
    - not root_pool_encryption | default(false) | bool
    - disk_by_id | length | int > 1
  tags:
    - config_swap
  block:
    - name: Run chroot command to create swap filesystem for multi-disk mdadm device
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "mkswap -f {{ swap_dev_name }}"

    # Entries would only exist if this task had been run previously
    - name: Remove any existing swap device references from fstab
      ansible.builtin.replace:
        path: "{{ live_cd_mountpoint }}/etc/fstab"
        regexp: '(?m)^UUID.*none swap.*\n?'
        replace: ''

    - name: Run chroot command to add swap filesystem to /etc/fstab
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "echo UUID=$(blkid -s UUID -o value {{ swap_dev_name }}) none swap discard,sw 0 0
          >> /etc/fstab"

###############################################################################
# [ Single or Multi Disk Encrypted Swap Configuration ]########################
- name: Multi Disk Encrypted Swap Block
  when:
    - ansible_nodename != "localhost"
    - enable_swap_partitions|default(true)|bool
    - root_pool_encryption|default(false)|bool
  tags:
    - config_swap
  block:
    - name: Run chroot command to install cryptsetup on Debian based systems
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c 'apt install --yes cryptsetup'"
      register: cmd_output
      changed_when: cmd_output.rc == 0

      when:
        - ansible_os_family == "Debian"

    # Work for Encrypted Single Disk SWAP
    - name: Run chroot command to add single encrypted swap partition to /etc/crypttab
      ansible.builtin.shell:
        cmd: "{{ chroot_cmd }} bash -c
          'echo swap {{ disk_by_id[0] }}-part2 /dev/urandom
          swap,cipher=aes-xts-plain64:sha256,size=512 >> /etc/crypttab'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      when:
        - disk_by_id | length | int == 1

    # Work for Multi Disk Encrypted SWAP
    - name: Run chroot commands to add multi-disk encrypted swap partitions to /etc/crypttab
      ansible.builtin.shell:
        cmd: "{{ chroot_cmd }} bash -c
          'echo swap /dev/md0 /dev/urandom
          swap,cipher=aes-xts-plain64:sha256,size=512 >> /etc/crypttab'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      when:
        - disk_by_id | length | int > 1

    - name: Run chroot command to add swap device map to /etc/fstab (Single or Multi Disk)
      ansible.builtin.shell:
        cmd: "{{ chroot_cmd }} bash -c 'echo /dev/mapper/swap none swap discard,sw 0 0 >> /etc/fstab'"
      register: cmd_output
      changed_when: cmd_output.rc == 0

###############################################################################

- name: Enable LZ4 for zswap compressed page cache in front of swap.
  when:
    - ansible_nodename != "localhost"
  tags:
    - config_swap
  block:
    - name: Enable LZ4 zswap compressed page cache in front of swap
      ansible.builtin.template:
        src: "zfs-lz4.conf.j2"
        dest: "{{ live_cd_mountpoint }}/etc/modules-load.d/zfs-lz4.conf"
        owner: root
        group: root
        mode: "644"
