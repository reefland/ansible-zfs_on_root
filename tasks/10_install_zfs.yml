---
# [ Install ZFS and Kernel ]###################################################
# If optional kernel hardware enablement feature is enabled, will be used here.

- name: Install ZFS into chroot Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - install_zfs
  block:

    ###############################################################################
    # [ Apply APT-Cacher-NG Configuration ]########################################
    # If an APT caching proxy server is available set this up early to reduce
    # bandwidth requirements when downloading packages to install. This task will
    # create file: /mnt/etc/apt/apt.conf.d/01proxy

    - name: Apply Apt-Cacher-NG Configuration Update
      ansible.builtin.template:
        src: "apt_01proxy.j2"
        dest: "{{ live_cd_mountpoint }}/etc/apt/apt.conf.d/01proxy"
        owner: "root"
        group: "root"
        mode: "0644"
      when:
        - apt_http_proxy is defined or
          apt_https_proxy is defined

    - name: Run chroot command for apt update
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c 'apt-get -qq update'"
      register: cmd_output
      changed_when: cmd_output.rc == 0

    - name: Configure chroot Environment for ZFS installs
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "apt-get install --yes --no-install-recommends software-properties-common debconf-utils"
        - "locale-gen --purge en_US.UTF-8 {{ locale_prefix }}"
        - "update-locale LANG={{ locale_prefix }}"
        - "dpkg-reconfigure --frontend noninteractive locales tzdata keyboard-configuration
          console-setup"

    - name: Run chroot command for apt update
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c 'apt-get -qq update'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      when:
        - ansible_os_family == "Debian"

    - name: Install ZFS into chroot
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "apt-get install --yes --no-install-recommends
          {{ enable_ubuntu_lts_hwe | ternary('linux-generic-hwe-' + ubuntu_version + ' linux-headers-generic-hwe-'
          + ubuntu_version + ' linux-image-generic-hwe-' + ubuntu_version, 'linux-generic linux-headers-generic linux-image-generic') }}"
        - "apt-get install --yes --no-install-recommends mdadm wget nano vim dosfstools"
        - "apt-get install --yes --no-install-recommends zfsutils-linux zfs-zed zfs-initramfs"
      when:
        - ansible_os_family == "Debian"

    # The "old" kernel links mess up zfsbootmenu generation, so remove them
    # Don't need them for an initial install anyway
    - name: Clean up old kernel links
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      loop:
        - "{{ live_cd_mountpoint }}/boot/vmlinuz.old"
        - "{{ live_cd_mountpoint }}/boot/initrd.img.old"

    - name: Ensure cachefile exists and zfs-import-cache is active
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "zpool set cachefile=/etc/zfs/zpool.cache {{ root_pool_name }}"
        - "systemctl enable zfs.target zfs-import-cache zfs-mount zfs-import.target"
