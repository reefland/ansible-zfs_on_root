---
# [ Prepare for First Reboot ]#################################################
- name: Prepare for First Reboot Block
  when:
    - ansible_nodename != "localhost"
  tags:
    - first_boot_prep
  block:
    - name: Run chroot commands assemble EFI boot array if needed
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "mdadm --assemble {{ boot_dev_name }} --conf /etc/mdadm/mdadm.conf"
      args:
        creates: "{{ live_cd_mountpoint }}/{{ boot_dev_name }}"
      when:
        - disk_by_id | length | int > 1

    - name: Run chroot commands to mount EFI boot array
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "mount {{ efi_boot_mountpoint }}"
      args:
        creates: "{{ live_cd_mountpoint }}/{{ efi_boot_path }}"
      when:
        - disk_by_id | length | int > 1

    - name: Run chroot command add ansible user account (password disabled)
      ansible.builtin.command:
        "{{ chroot_cmd }} bash -c
        'adduser {{ ansible_user }} --disabled-password --gecos Ansible_User'"
      args:
        creates: "{{ live_cd_mountpoint }}/home/{{ ansible_user }}"

    - name: Copy over ansible sudoers include file to chroot environment
      ansible.builtin.copy:
        src: "{{ sudoers_include_file }}"
        dest: "{{ live_cd_mountpoint }}/{{ sudoers_include_file }}"
        mode: "0644"
        remote_src: true

    - name: Capture name of ansible user
      ansible.builtin.command:
        cmd: "echo {{ ansible_user }}"
      register: ansible_username
      changed_when: ansible_username.rc == 0

    # Ansible user ID on host can be different than in chroot
    - name: Get ansible user id inside chroot
      ansible.builtin.shell: # noqa command-instead-of-shell risky-shell-pipe
        cmd: "{{ chroot_cmd }} bash -c 'set -o pipefail; getent passwd {{ ansible_username.stdout }} | cut -f 3 -d \":\"'"
      register: ansible_uid
      changed_when: ansible_uid.rc == 0

    - name: Debug detected ansible user id
      ansible.builtin.debug:
        msg: "Ansible user id detected: {{ ansible_uid.stdout }}"

    - name: Get ansible group id inside chroot
      ansible.builtin.shell: # noqa command-instead-of-shell risky-shell-pipe
        cmd: "{{ chroot_cmd }} bash -c 'set -o pipefail; getent passwd {{ ansible_username.stdout }} | cut -f 4 -d \":\"'"
      register: ansible_gid
      changed_when: ansible_gid.rc == 0

    - name: Debug detected ansible group id
      ansible.builtin.debug:
        msg: "Ansible group id detected: {{ ansible_gid.stdout }}"

    - name: Copy over ansible ssh key to chroot environment
      ansible.builtin.copy: # noqa risky-file-permissions
        src: "/home/{{ ansible_user }}/.ssh"
        dest: "{{ live_cd_mountpoint }}/home/{{ ansible_user }}/"
        owner: "{{ ansible_uid.stdout }}"
        group: "{{ ansible_gid.stdout }}"
        remote_src: true

    - name: Copy admin scripts root home directory.
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "{{ live_cd_mountpoint }}/root/{{ item }}"
        owner: "root"
        group: "root"
        mode: "0700"
      with_items:
        - "add_user.sh"
        - "refresh_efibootmgr.sh"

    # [ Start Upgrading install ]##############################################
    - name: Run chroot commands to run distr-upgrade
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "apt-get -qq --yes dist-upgrade"

    - name: Run chroot commands to enable acpid if detected
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "[ -d /proc/acpi ] && apt-get -qq --yes install acpi acpid &&
          systemctl enable acpid && systemctl stop acpid"

    - name: Copy bashrc file to specified locations
      ansible.builtin.template:
        src: bashrc.j2
        dest: "{{ item }}"
        owner: "root"
        group: "root"
        mode: "0644"
      with_items:
        - "{{ live_cd_mountpoint }}/etc/bash.bashrc"
        - "{{ live_cd_mountpoint }}/etc/skel/.bashrc"

    - name: Copy bash_aliases file to specified locations
      ansible.builtin.template:
        src: bash_aliases.j2
        dest: "{{ item }}"
        owner: "root"
        group: "root"
        mode: "0640"
      with_items:
        - "{{ live_cd_mountpoint }}/etc/skel/.bash_aliases"
        - "{{ live_cd_mountpoint }}/root/.bashrc"

    - name: Add nicer PS1 ROOT prompt
      ansible.builtin.lineinfile: # noqa yaml[line-length]
        path: "{{ live_cd_mountpoint }}/root/.bashrc"
        line: >
          PS1="\[\033[01;37m\]\[\033[01;41m\]\u@\[\033[00m\]\[$(tput bold)\]\[$(tput
          setaf 5)\]\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$ "
        state: present
        backup: true

    # Update ZFS Encryption Key Location
    - name: Run chroot commands Update ZFS Encryption Key Location
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      no_log: "{{ no_log_secrets | default(true) }}"
      with_items:
        - "echo '{{ passphrase }}' > /etc/zfs/zroot.key"
        - "chmod 000 /etc/zfs/zroot.key"
        - "zfs change-key -o keylocation=file:///etc/zfs/zroot.key
          -o keyformat=passphrase {{ root_pool_name }}/ROOT"
      when:
        - root_pool_encryption | default(false) | bool

    - name: Add zfs zroot.key reference to dracut
      ansible.builtin.lineinfile:
        path: "{{ live_cd_mountpoint }}/etc/dracut.conf.d/zfskey.conf"
        line: 'install_items+=" /etc/zfs/zroot.key "'
        create: true
        mode: "0644"
        state: present
        backup: true
      when:
        - root_pool_encryption | default(false) | bool

    - name: Run chroot commands for Dracut Generate
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "dracut -f --regenerate-all"

    - name: Run chroot commands to update Syslinux when not using EFI
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "/boot/efi/syslinux-update.sh"
      when:
        - efi_firmware_directory.stat.isdir is undefined

    - name: Allow read-only ZFS commands with no sudo password
      ansible.builtin.shell: # noqa command-instead-of-shell
        "{{ chroot_cmd }} bash -c '{{ item }}'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      with_items:
        - "set -o pipefail; cat /etc/sudoers.d/zfs | sed -e 's/#//' > /etc/sudoers.d/zfsALLOW"

    - name: Removing os-prober (only needed on dual-boot systems)
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c 'dpkg --purge os-prober'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
      when:
        - remove_os_prober | default(false) | bool

    - name: Run chroot command to set default root password
      ansible.builtin.expect:
        command: "{{ chroot_cmd }} bash -c 'passwd'"
        responses:
          (?i)password: "{{ default_root_password }}"
      no_log: "{{ no_log_secrets | default(true) }}"

    - name: Run chroot command to enable mount on default/root dataset
      ansible.builtin.command:
        cmd: "{{ chroot_cmd }} bash -c
          'zfs set canmount=on {{ root_pool_dataset_path }} && sleep 1'"
      register: cmd_output
      changed_when: cmd_output.rc == 0
