---
###############################################################################
# Ansible Specific Settings
###############################################################################
# Don't log secret like ZFS on Root Password when running playbook
no_log_secrets: true

###############################################################################
# User Settings
###############################################################################

# This is a temporary root password used during the build process.
# Root password will be disabled during the final stages.
# The non-root user account will have sudo privileges
default_root_password: "change!me"

# Define non-root user account(s) to create (home drives will be its own dataset)
# Each user will be required to change password upon first login
regular_user_accounts:
  - user_id: "rich"
    password: "change!me"
    full_name: "Richard Durso"
    groups: "adm,cdrom,dip,lpadmin,lxd,plugdev,sambashare,sudo"
    shell: "/bin/bash"
    google_auth: false

###############################################################################
# Google Authenticator Settings
###############################################################################
# Google Authenticator is only installed if at least one user is defined above
# with it enabled, and is only used (by default) for password sessions not cert
# based sessions.

# Set the nullok parameter for pam_google_authenticator.so in /etc/pam.d/sshd
# When true, this allows password logins if no ~/.google_authenticator exists
# If false, then users can NOT login until ~/.google_authenticator is created.
google_auth_nullok: true

# Force user to use authenticator even with SSH key
google_auth_force: false

# Default label and issuer if not defined in inventory file for the host(s)
# NOTES: 1) Be sure to use char encoding for spaces such as "Example%20Inc."
#        2) "{{ username }}" is replaced with the "user_id" defined above.
google_auth_label: "{{ inventory_hostname }}:{{ username }}"
google_auth_issuer: "Ubuntu"

###############################################################################
# Computer Configuration Settings
###############################################################################
# Default domain hosts will use if not defined in inventory file
domain_name: "localdomain"

# rEFInd Boot Menu Timeout by default is 20 seconds.
refind_boot_menu_timeout: "10"

# Enables background image for refind / syslinux
refind_boot_menu_logo: true

# Needs to be a JPG or PNG file.
refind_boot_menu_logo_filename: "ubuntu-style.png"

# Needs to be a JPG or PNG file at 640x48 for syslinux.
syslinux_boot_menu_logo_filename: "ubuntu-style-sm.png"

# Use ZFSBootMenu KERNEL binary or Build From Source.  The KERNEL binary does
# not seem to enable networking thus does not work with Dropbear for entering
# ZFS encryption password at boot remotely.
# Default: if "enable_dropbear_support" is true then "zfs_boot_menu_compile"
# is true.
zfs_boot_menu_compile: "{{ enable_dropbear_support }}"

# Enable EFI Fallback - needed on some buggy UEFI BIOS which are hard
# coded to only look for bootx64.efi file name. When set to true a copy
# of refined_x64.efi will be copied to bootx64.efi
efi_fallback_enabled: false

# Take a ZFS snapshot of the base system install named "@base_install". This would be
# a "pristine" snapshot of the system after the initial install and configuration
# of the system.  This is useful for restoring the system to a known good state.
# This is performed as the last task in the "final_setup" task.
take_base_install_snapshot: false

# UEFI Secure Boot Support - For SecureBoot to be enabled and configured, the
# system must first be put into Setup Mode. This will vary by system, but generally
# it means that any existing keys must be deleted in the bios config for UEFI SecureBoot.
# "sbctl" is used to manage and configure the UEFI SecureBoot keys.  When enabled, the
# process is as follows: 1) create-keys will generate the local set of keys,
# 2) enroll-keys will enroll the new keys and the default Microsoft keys into the UEFI
# SecureBoot efi vars, 3) sign refind_x64.efi and zfsbootmenu.efi.
efi_secure_boot_enabled: false

# For Full GUI Desktop installation (set to false) or command-line only server
# environment (set to true)
command_line_only: true

# The Ubuntu LTS enablement (also called HWE or Hardware Enablement) stacks
# provide newer kernel and X support for existing Ubuntu LTS releases.
enable_ubuntu_lts_hwe: false

# Define the local pre-fix to enable in /etc/locale.gen
locale_prefix: "en_US.UTF-8"

# Define the timezone to be placed in /etc/timezone
timezone_value: "America/New_York"

# Disable IPv6 if you do not use it.  The "disable_settings" will be applied to
# "conf_file"
ipv6:
  disable: true
  conf_file: "/etc/sysctl.d/99-sysctl.conf"
  disable_settings:
    - "net.ipv6.conf.all.disable_ipv6 = 1"
    - "net.ipv6.conf.default.disable_ipv6 = 1"
    - "net.ipv6.conf.lo.disable_ipv6 = 1"
  apply_cmd: "sysctl -p"

# Define additional packages to install once the build has completed.
additional_install_packages:
  - man
  - udisks2
  - pciutils
  - net-tools
  - ethtool
  - fonts-ubuntu-console
  - htop
  - pollinate
  - fwupd
  - needrestart
  - unattended-upgrades
  - lz4

# Enable and Define SMTP Email Alerts for System
# msmtp is a simple and easy to use SMTP client
# https://github.com/chriswayg/ansible-msmtp-mailer
msmtp:
  enabled: true
  msmtp_domain: "gmail.com"
  # Default email alias name to sent alerts to (required)
  msmtp_alias_default: "{{ secret_msmpt_send_to_email |
    default('not defined within vars/secrets/main.yml') }}"
  # Optional Email alias address to redirect "root" emails to
  # msmtp_alias_root: "other.account.for.root@gmail.com"
  # Optional Email alias address to redirect "cron" emails to
  # msmtp_alias_cron: "other.account.for.cron@gmail.com"

  msmtp_default_account: "gmail"
  accounts:
    - account: "gmail"
      host: "smtp.gmail.com"
      port: "587"
      auth: "on"
      from: "{{ secret_msmtp_send_from_email |
        default('not defined within vars/secrets/main.yml') }}"
      user: "{{ secret_msmtp_auth_user |
        default('not defined within vars/secrets/main.yml') }}"
      password: "{{ secret_msmtp_auth_password |
        default('not defined within vars/secrets/main.yml') }}"

###############################################################################
# Swap Partition Settings
###############################################################################
# Create Swap Partitions
enable_swap_partitions: false

# Swap partition size when one or two devices are used
single_or_mirror_swap_partition_size_mb: "4096"

# Swap partition size, per device, when three or more devices are used.
# Estimated size in MB is:  (num_devices-1) * (size_mb)
raidz_swap_partition_size_mb: "1024"

###############################################################################
# Root Pool Settings
###############################################################################
# Define Pool Names - can be set to whatever you like.
# Short hostname is default, this is like "rpool" in the previous methods.
root_pool_name: "{{ host_name }}"

# Define ZFS default compression to enable
zfs_compression: "lz4"

# The root pool by default will consume all remaining disk space on the devices
# limited by the free space of the smallest device specified.  For example a
# mirror between a 512GB and 256GB device cannot be larger than the capacity of
# the smaller device.

# If you wish to limit the root pool size leaving unused space, you can define
# that here.  Specify how much space to allocate or NOT allocate per root pool
# partition per device.

# Examples:
# "+256G" will create partition 256Gib in size
# "-200M" will use all available space, minus 200Mib
# "0" (zero) use all available space
root_partition_size: "0"

# Prompt for Native ZFS Encryption Passphrase.  if true, then prompt for
# passphrase if not provided.
prompt_for_zfs_passphrase: false

###############################################################################
# ZFS Specific Adjustable Settings
###############################################################################

# Define the root pool type based on number of devices.
#  - If you want 3 devices to be a 3 way mirror change it, etc.
#  - If even number 2,4,6,8, etc of type mirror, then mirrored vdevs will be used.
#  - -  This is higher performance with redundancy and much faster resilver times
#  - -  than using any type of raidz.
#  - Raidz will be the default if something below is not defined.
#  - NOTE: A raidz2 requires 4 or more devices.
set_root_pool_type:
  1: ""         # single device
  2: "mirror"
  3: "raidz"
  4: "mirror"
  5: "raidz"
  6: "mirror"
  default: "raidz"

# Define ZFS ashift value to use
zfs_rpool_ashift: 12

# On systems with lots of disks, enumerating them can sometimes take a long time,
# which means the root disks may not have been enumerated before ZFS tries to
# import the root pool. That drops you to an initramfs prompt where you have to
# use 'zfs import -N <root_pool> ; exit'
# This sets the same delay on:
#  - ZFS_INITRD_POST_MODPROBE_SLEEP
#  - ZFS_INITRD_PRE_MOUNTROOT_SLEEP
zfs_pool_import_delay_enabled: true
zfs_pool_import_delay_seconds: 10

# Enable ZFS Pool Trim Service after creating
# NOTE: false will create, just not enable by default.
zfs_pool_trim_systemd_service_enable: false

# Define ZFS Pool Trim Schedule (see systemd OnCalendar for valid options)
zfs_pool_trim_systemd_oncalendar: "weekly"

# Enable ZFS Pool Scrub Service after creating
# NOTE: false will create, just not enable by default.
zfs_pool_scrub_systemd_service_enable: true

# Define ZFS Pool Trim Schedule (see systemd OnCalendar for valid options)
zfs_pool_scrub_systemd_oncalendar: "monthly"

###############################################################################
# SSH Settings
###############################################################################
# The following SSHD Settings will be applied at final_cleanup
# IMPORTANT: Only some basic settings which can be search and replaced using
#            values such as works such as: "yes", "no", "none", "any",
#            "prohibit-password", digits (such as 10, 22, or 2m). This does not
#            match fancy items like IP Address or full directory paths.
update_sshd_settings: true
apply_sshd_settings:
  PasswordAuthentication: "no"
  PermitRootLogin: "prohibit-password"
  PubkeyAuthentication: "yes"

###############################################################################
# Dropbear Settings
###############################################################################
# Dropbear support allows for small SSH service to be included in initram to
# allow for remote connection to enter the ZFS Native Encryption Password.
#
enable_dropbear_support: true
apply_dropbear_settings:
  # Automatic (dhcp) or static IP assignment for zfsbootmenu remote access
  # "dhcp", "dhcp,dhcp6", "dhcp6", or "static"
  remoteaccess_ip_config: "dhcp"
  # Remote access static IP address to connect to ZFSBootMenu
  # Only used with "static", not used for dhcp or dhcp6 automatic IP configuration
  remoteaccess_ip: "192.168.0.222"
  # Remote access subnet mask
  # Only used with "static", not used for dhcp or dhcp6 automatic IP configuration
  remoteaccess_netmask: "255.255.255.0"
  # Define the full path to public key(s) you want to include in Dropbear
  # Allow dracut / dropbear use main user authorized_keys for access
  # Note that login to dropbear is "root" regardless of which authorized_keys is used
  public_key_for_dropbear: "/home/{{ regular_user_accounts[0].user_id }}/.ssh/authorized_keys"
